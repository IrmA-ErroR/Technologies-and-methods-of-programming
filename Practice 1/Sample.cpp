#include "stdafx.h"
#include <locale.h>
#include <ctime>
#include "windows.h"
#include <iostream>
using namespace std;

struct Node
{
// ัะบะฐะทะฐัะตะปั ะฝะฐ ัะปะตะดัััะธะน ัะปะตะผะตะฝั ะฒ ะพัะตัะตะดะธ
Node *next;
// ะทะฝะฐัะตะฝะธะต ัะปะตะผะตะฝัะฐ ะฒ ะพัะตัะตะดะธ
int value;
};

class Ochered
{
public:
// ะะพะปะปะธัะตััะฒะพ ัะปะตะผะตะฝัะพะฒ ะฒ ัะฟะธัะบะต
int N;
int i;
int size = 0;
int size_1 = NULL;
// ะกัะตััะธะบ ะบะพะปะปะธัะตััะฒะฐ ะพะฟะตัะฐัะธะน
unsigned long long int N_op = 0;
// ัะบะฐะทะฐัะตะปั ะฝะฐ ะฟะตัะฒัะน ัะปะตะผะตะฝั
Node *head;
// ัะบะฐะทะฐัะตะปั ะฝะฐ ัะฒะพัั ะพัะตัะตะดะธ
Node *tail;
  
// ะธะฝะธัะธะฐะปะธะทะฐัะธั ะพัะตัะตะดะธ
void Init() //2
{
head = NULL; //1
// ะัะธ ะธะฝะธัะธะฐะปะธะทะฐัะธะธ head ะธ tail = NULL
tail = head; //1
}

// ะดะพะฑะฐะฒะปะตะฝะธะต ัะปะตะผะตะฝัะฐ ะฒ ะฝะฐัะฐะปะพ ะพัะตัะตะดะธ, x - ะทะฝะฐัะตะฝะธะต ััะพะณะพ ัะปะตะผะตะฝัะฐ
void Add(int x) //(3+2+2)+(1+2+1)+2=13
{
// ัะพะทะดะฐะฝะธะต ะฝะพะฒะพะณะพ ัะปะตะผะตะฝัะฐ
Node *node = new Node; //3
// ะฒ ะฟะพะปะต next ะดะฐะฝะฝะพะณะพ ัะปะตะผะตะฝัะฐ ะทะฐะฟะธััะฒะฐะตััั NULL
node->next = NULL; //2
// ะฒ ะฟะพะปะต value ะทะฐะฟะธััะฒะฐะตััั ะทะฝะฐัะตะฝะธะต ััะตะนะบะธ ะพัะตัะตะดะธ int
node->value = x; //2
// ะฟะพัะปะต ะธะฝะธัะธะฐะปะธะทะฐัะธะธ ะธ ะฟัะธ ัะพะทะดะฐะฝะธะธ ะฟะตัะฒะพะณะพ ัะปะตะผะตะฝัะฐ ะผั ะฟัะพัะพะดะธะผ ะฟะพ ะฒะตัะบะต else
if (tail != NULL) //1
{
/* ะดะพะฑะฐะฒะปะตะฝะธะต ัะปะตะผะตะฝัะฐ ัะตัะตะท ัะฒะพัั ะฒ ะพัะตัะตะดะธ,
tail ัะบะฐะทัะฒะฐะตั ะฝะฐ ะฟะตัะฒัะน ัะปะตะผะตะฝั ะฒ ะพัะตัะตะดะธ ะฟะตัะตะด ะดะพะฑะฐะฒะปัะตะผัะผ
ะฒ ะฟะพะปะต next ะฟะตัะฒะพะณะพ ัะปะตะผะตะฝัะฐ ะทะฐะฟะธััะฒะฐะตััั ะฐะดัะตั ะฝะพะฒะพะณะพ ะฟะตัะฒะพะณะพ ัะปะตะผะตะฝัะฐ*/
  tail->next = node; //2
// tail ะฝะฐัะธะฝะฐะตั ัะบะฐะทัะฒะฐัั ะฝะฐ ะฝะพะฒัะน ัะปะตะผะตะฝั ะฒ ะพัะตัะตะดะธ
tail = node; //1
}

else
{
// ัะฒะพัั ัะบะฐะทัะฒะฐะตั ะฝะฐ ะฟะตัะฒัะน ัะปะตะผะตะฝั ะฒ ะพัะตัะตะดะธ
tail = node; //1
// ะณะพะปะพะฒะฐ ัะบะฐะทัะฒะฐะตั ะฝะฐ ะฟะตัะฒัะน ัะปะตะผะตะฝั ะฒ ะพัะตัะตะดะธ
head = tail; //1
}
size++; //2
}
// ะฟัะพะฒะตัะบะฐ ะพัะตัะตะดะธ ะฝะฐ ะฟัััะพัั
bool Isempty() //1
{
//true, ะตัะปะธ head = NULL; false, ะตัะปะธ head ัะบะฐะทัะฒะฐะตั ะฝะฐ ะบะฐะบะพะน-ะปะธะฑะพ ัะปะตะผะตะฝั ะฒ ะพัะตัะตะดะธ
return head == NULL; //1
}

// ัะดะฐะปะตะฝะธะต ัะปะตะผะตะฝัะฐ ะธะท ะบะพะฝัะฐ ะพัะตัะตะดะธ
int Del() //1+(2+2+2+1+2+2+2)=14
{
int val = NULL; //1
// ะตัะปะธ ะพัะตัะตะดั ะฝะต ะฟัััะฐ
if (Isempty() != 1) //2
{
// ัะพะทะดะฐะตะผ ัะบะฐะทะฐัะตะปั ะฝะฐ ััััะบัััั
Node *tmp;
// ะฒ ัะบะฐะทะฐัะตะปัั tmp ะบะปะฐะดะตะผ ัััะปะบั ะฝะฐ next ะฟัะตะดะฟะพัะปะตะดะฝะตะณะพ ัะปะตะผะตะฝัะฐ ะฒ ะพัะตัะตะดะธ
tmp = head->next; //2
// ะฒ val ะทะฐะฟะธััะฒะฐะตะผ ะทะฝะฐัะตะฝะธะต ะฟะพัะปะตะดะฝะตะณะพ ัะปะตะผะตะฝัะฐ ะฒ ะพัะตัะตะดะธ
val = head->value; //2
// ัะดะฐะปัะตะผ ะพะฑัะตะบั ะฟะพ ัะบะฐะทะฐัะตะปั head (ะฟะพัะปะตะดะฝะธะน ัะปะตะผะตะฝั ะฒ ะพัะตัะตะดะธ)
delete head;
// head ะฝะฐัะธะฝะฐะตั ัะบะฐะทัะฒะฐัั ะฝะฐ ะฟัะตะดะฟะพcะปะตะดะฝะธะน ัะปะตะผะตะฝั ะฒ ะพัะตัะตะดะธ (ะฟะพัะปะตะดะฝะธะน ัะดะฐะปะตะฝ)
head = tmp; //1
// ะะพัะปะต ัะดะฐะปะตะฝะธั ะฟะพัะปะตะดะฝะตะณะพ ัะปะตะผะตะฝัะฐ ะธะท ะพัะตัะตะดะธ ะฟัะพะธััะพะดะธั ะฟะพะฒัะพัะฝะฐั ะธะฝะธัะธะฐะปะธะทะฐัะธั
if (Isempty() == 1) //2
{
Init(); //2
}
size--; //2
// ะฒะพะทะฒัะฐัะฐะตะผ ะทะฝะฐัะตะฝะธะต ะฟะพัะปะตะดะฝะตะณะพ ัะปะตะผะตะฝัะฐ ะฒ ะพัะตัะตะดะธ
return val;
}
else { cout << "ะัะตัะตะดั ะฟัััะฐ!" << endl; }
return 0;
}

// ะฟะพะปััะตะฝะธะต ะทะฝะฐัะตะฝะธั ะธะท ะบะพะฝัะฐ ะพัะตัะตะดะธ
int Value() //3
{
// ะตัะปะธ ะพัะตัะตะดั ะฝะต ะฟัััะฐ
if (Isempty() != 1) //2
{
// ัะตัะตะท ัะบะฐะทะฐัะตะปั head ะฟะพะปััะธัั ะทะฝะฐัะตะฝะธะต value ะฟะพัะปะตะดะฝะตะณะพ ัะปะตะผะตะฝัะฐ ะฒ ะพัะตัะตะดะธ
return head->value; //1
}
else { cout << "ะัะตัะตะดั ะฟัััะฐ!" << endl; }
return 0;
}
};

// ะะปะฐัั ะฝะฐัะปะตะดะฝะธะบ
class Numbers : public Ochered
{
public:
// ะฟะพะปััะตะฝะธะต ะทะฝะฐัะตะฝะธั ะธะท ัะฟะธัะบะฐ, x - ะฝะพะผะตั ัะปะตะผะตะฝัะฐ ะฒ ัะฟะธัะบะต
int get(int x) //2+1+1+(1+33n)=5+33n
{
// ะตัะปะธ ะพัะตัะตะดั ะฝะต ะฟัััะฐ
if (Isempty() != 1) //2
{
size_1 = size; //1
int val1 = NULL; //1
// ะะตัะตะฑะพั ะฒัะตั ะทะฝะฐัะตะฝะธะน ะฒ ัะฟะธัะบะต
for (int i = 1; i < size_1 + 1; i++) //1+โ(1+4+1+27)=1+โ(33)=1+33๐๐1๐1
{
if (i == x) //1
{
// ะะพะณะดะฐ i ะดะพัะพะดะธั ะดะพ ะฝะพะผะตัะฐ ะฟะพะปััะฐะตะผะพะณะพ ัะปะตะผะตะฝัะฐ, ัะพ ะฒ val ะทะฐะฟะธััะฒะฐะตััั ะทะฝะฐัะตะฝะธะต ะดะฐะฝะฝะพะณะพ ัะปะตะผะตะฝัะฐ
val1 = Value(); //4
}

// ะะตัะตะฑะพั ะฝะฐัะธะฝะฐะตััั ัะพะปัะบะพ ะฒ ัะปััะฐะต ะตัะปะธ x ะฝะต ัะฐะฒะตะฝ ะฝัะปั

if (x != 1) //1
{
// ะะฝะฐัะฐะปะต ัะปะตะผะตะฝั ัะดะฐะปัะตััั ะธะท ะบะพะฝัะฐ ะพัะตัะตะดะธ, ะธ ััะฐะทั ะถะต ะดะพะฑะฐะฒะปัะตััั ะฒ ะฝะฐัะฐะปะพ ะพัะตัะตะดะธ, ะธ ัะฐะบ ะฒ ัะธะบะปะต ะฟะพะบะฐ ะฝะต ะฒะพัััะฐะฝะพะฒะธััั ะฟะตัะฒะพะฝะฐัะฐะปัะฝะพะต ัะพััะพัะฝะธะต ะพัะตัะตะดะธ
Add(Del()); //14+13=27
}

else
{
// ะ ะฟัะพัะธะฒะฝะพะผ ัะปััะฐะต ััะฐะทั ะฒััะพะดะธะผ ะธะท ัะธะบะปะฐ for
break;
}
}

// ะะพะทะฒัะฐัะฐะตััั ะทะฝะฐัะตะฝะธะต ัะปะตะผะตะฝัะฐ ะฟะพะด ะฝะพะผะตัะพะผ x ะธะท ะพัะตัะตะดะธ
return val1;
}
else { cout << "ะัะตัะตะดั ะฟัััะฐ!" << endl; }
return 0;
}

// ัััะฐะฝะพะฒะบะฐ ะทะฝะฐัะตะฝะธั ัะปะตะผะตะฝัะฐ ะฒ ัะฟะธัะบะต, x - ะฝะพะผะตั ัะปะตะผะตะฝัะฐ ะฒ ัะฟะธัะบะต, y - ะทะฝะฐัะตะฝะธะต ัะปะตะผะตะฝัะฐ ะฒ ัะฟะธัะบะต

void set(int x, int y) //2+3+31n=5+31n

{

// ะตัะปะธ ะพัะตัะตะดั ะฝะต ะฟัััะฐ

if (Isempty() != 1) //2

{

if (x <= size) //1+1+1+31n=3+31n

{

size_1 = size; //1

for (int i = 1; i < size_1 + 1; i++) //1+โ(1+2+1+27)๐1=1+31๐

{

if (i == x) //1

{

// ะะฐะฟะธัั ะทะฝะฐัะตะฝะธั y ะฒ ัะฟะธัะพะบ

head->value = y; //2

}

if (x != 1) //1

{

Add(Del()); //14+13=27

}

else

{

break;

}

}

}

// ะัะปะธ ัะปะตะผะตะฝั ัััะฐะฝะฐะฒะปะธะฒะฐะตััั ะทะฐ ะฟัะตะดะตะปั ะธะทะฝะฐัะฐะปัะฝะพะณะพ ัะฟะธัะบะฐ

else //1+2+1+โ(13)+13๐ฅ๐+1=17+ โ(13)๐ฅ๐+1

{

if (x == size + 1) //2

{

//ะัะปะธ ะฝะพะผะตั ัะปะตะผะตะฝัะฐ ะฒ ัะฟะธัะบะต ะฝะฐ 1 ะฑะพะปััะต ัะฐะทะผะตัะฐ ะพัะตัะตะดะธ, ะทะฝะฐัะธั ัะปะตะผะตะฝั ะดะพะฑะฐะฒะปัะตััั ะฒ ะฝะฐัะฐะปะพ ะพัะตัะตะดะธ

Add(y);

}

else

{

for (i = size + 1; i < x; i++) //1+โ(13)๐ฅ๐+1

{

// ะ ะฟัะพัะธะฒะฝะพะผ ัะปััะฐะต ะพัะตัะตะดั ะทะฐะฟะพะปะฝัะตััั ะฝัะปัะผะธ

Add(0); //13

}

Add(y); //13

}

}

}

else { cout << "ะัะตัะตะดั ะฟัััะฐ!" << endl; }

}

void sort(int N)

{

int s, f, d, i, j, g, k, p;

s = 1; //1

do

{

s = 1 - s; //2

d = 1; //1

f = 1; //1

if (s == 0) //1

{

i = 1; //1

j = N; //1

k = N + 1; //2

g = 2 * N; //2

}

else

{

i = N + 1; //2

j = 2 * N; //2

k = 1; //1

g = N; //1

}

while (i != j)//โ(1+11+132๐+10+128๐+2+2+132๐+12+130๐2+13๐+๐11+1+1+1+1)=โ(43+405๐+130๐2)=43๐+405๐2+130๐3๐1

{

// if(K[i]<K[j])

if (get(i) > get(j))//(5+โ(33)2๐1)+(5+โ(33)2๐1)+1=5+66๐+5+66๐+1= 11+132๐
{
// R[k] = R[j];
set(k, get(j));//(5+โ(33)2๐1)+(5+โ(31)2๐1)=5+66๐+5+62๐= 10+128๐
k = k + d; //2
j = j - 1; //2
// if (!(K[j+1]<=K[j]))
if (get(j + 1) <= get(j)) //5+66n+1+5+66n+1=132n+12
{
}
else
{
do
{
// R[k]=R[i];
set(k, get(i)); //10+128n
k = k + d; //2
i = i + 1; //2

}
// while(!K[i-1]>=K[i]);

while (get(i - 1) < get(i)); //โ(10+128๐+2+2+2+5+๐/2166๐+5+66๐)=โ(10)+โ(128๐)+โ(2)+โ(2)+โ(2)+โ(5)+โ(66๐)+โ(5)+โ(66๐)๐/21๐/21๐/21๐/21๐/21=๐/21๐/21๐/21๐/2110๐2+128๐22+2๐2+2๐2+2๐2+5๐2+66๐22+5๐2+66๐22=5๐+64๐2+๐+๐+๐+33๐2+33๐2+5๐=130๐2+13๐
f = 0; //1
d = -d; //1
p = k; //1
k = g; //1
g = p; //1
}
}
else
{
// R[k]=R[i];
set(k, get(i));
k = k + d; //2
i = i + 1; //2
// if(K[i-1]<=K[i])
if (get(i - 1) <= get(i)) //โฆ+2
{
}
else
{
do
{
// R[k] = R[j];
set(k, get(j));
k = k + d; //2
j = j - 1; //2
}
// while(K[j+1]>=K[j]);
while (get(j + 1) < get(j)); //โฆ+2
f = 0; //1
d = -d; //1
p = k; //1
k = g; //1
g = p; //1
}
}
}
//R[k]=R[i];
set(k, get(i)); //10+128n
} while (f != 1); //log2(๐)โ(2+1+1+1+1+1+2+2+43๐+405๐2+130๐3+10+128๐+1)=log2(๐)โ(22+171๐+405๐2+130๐3)
if (s == 0) //1
{
for (int i = 1; i <= N; i++)//1+โ(128๐+11)=1+โ(128๐)+โ(11)=1+128๐2+๐1๐1๐111๐
{
// R[i] = R[i+n];
set(i, get(i + N)); //128๐+11
}
}
size_1 = size; //1
for (int i = 1; i <= size_1; i++) //1+โ(27+2)=1+โ(29)=1+58๐2๐12๐1
{
if (i <= size / 2) //2
{
Add(Del()); //27
}
else
{
Del();
}
}
}
};

int main()
{
setlocale(LC_ALL, "ru");
srand(time(NULL));
// ะกัะตะผะฐ ัะบัะฟะตัะธะผะตะฝัะฐ
// ะะฝะธัะธะฐะปะธะทะฐัะธั ะพัะตัะตะดะธ ะธ ะทะฐะฟะพะปะฝะตะฝะธะต ััะฐะฝะธะปะธัะฐ ะบะปััะตะน
int i, t_s, t_f;
// ะฅัะฐะฝะธะปะธัะต ะบะปััะตะน
int Key[3000];
int N = 300;
Numbers list;
list.Init();
for (i = 0; i < 3000; i++)
{
// ะะฐะฟะพะปะฝะตะฝะธะต ััะฐะฝะธะปะธัะฐ ะบะปััะตะน ัะปััะฐะนะฝัะผะธ ัะธัะปะฐะผะธ ะดะพ 1000
Key[i] = rand() % 999;
}
for (i = 0; i < 10; i++)
{
for (int z = N - 300; z < N; z++)
{
list.Add(Key[z]);
}
list.N_op = 0;
t_s = GetTickCount();
list.sort(N);
t_f = GetTickCount();
cout << "ะะพะผะตั ัะพััะธัะพะฒะบะธ: " << i + 1 << " ะะพะปะปะธัะตััะฒะพ ะพััะพััะธัะพะฒะฐะฝะฝัั ัะปะตะผะตะฝัะพะฒ: " << N << " ะัะตะผั ัะพััะธัะพะฒะบะธ (ms): " << t_f - t_s << " ะะพะปะปะธัะตััะฒะพ ะพะฟะตัะฐัะธะน (N_op): " << list.N_op << endl; // ะจะฐะณ ะฒ 300 ัะปะตะผะตะฝัะพะฒ
N = N + 300;
}
return 0;
}

F(n)= 1+log2(๐)โ(22+171๐+405๐2+130๐3)+1+1+128๐2+11๐+1+1+58๐=log2(๐)โ(22+171๐+405๐2+130๐3)+5+69๐+128๐2

O(F(n))= log2(๐)โ(๐3)
